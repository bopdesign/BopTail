/**
 * Add your design tokens as Tailwind theme variables.
 *
 * https://tailwindcss.com/docs/theme
 */

/**
 * Import Tailwind’s default theme.
 */
@import "tailwindcss/theme";

/**
 * Your theme variables are merged with Tailwind’s defaults, either extending
 * the default theme with new variables or overriding the values of existing
 * variables.
 */
@theme {
	/**
	 * These theme variables use CSS variables set by WordPress using values
	 * from your `theme.json` file.
	 *
	 * If you are using the classic editor, you should use hardcoded color
	 * values instead of the `var()` functions below.
	 *
	 * Use --color-*: initial to completely disable all of the default colors and
	 * define your own custom color palette:
	 */
	--color-*: initial;
	--color-background: var(--wp--preset--color--background);
	--color-foreground: var(--wp--preset--color--foreground);
	--color-primary: var(--wp--preset--color--primary);
	--color-secondary: var(--wp--preset--color--secondary);
	--color-tertiary: var(--wp--preset--color--tertiary);
	--container-content: var(--wp--style--global--content-size);
	--container-wide: var(--wp--style--global--wide-size);

	--color-black: var(--wp--preset--color--black);
	--color-white: var(--wp--preset--color--white);

	/**
	 * These are the default `font-family` theme variables included with
	 * Tailwind. You can update them below by adding custom fonts at the
	 * beginning of each value.
	 *
	 * Default theme variables can be found in their entirety at the links
	 * below, on GitHub or in Tailwind’s documentation, respectively:
	 *
	 * https://github.com/tailwindlabs/tailwindcss/blob/main/packages/tailwindcss/theme.css
	 * https://tailwindcss.com/docs/theme#default-theme-variable-reference
	 */
	--font-sans: Geist, ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
	'Noto Color Emoji';
	--font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
	--font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;

	--breakpoint-2xl: 90rem;

	/**
	 * Add your theme below:
	 */

	/**
	 * Custom easing curves
	 * - ease-out: great for user-initiated interactions like opening a modal as the acceleration at the beginning gives
	 * the user a feeling of responsiveness. I apply this easing for most enter and exit animations.
	 * - ease-in-out: use it for anything that is already on the screen and needs to move to a new position, or morph
	 * into a new form.
	 * - ease: use this one mostly for hover effects that transition color, background-color, opacity, and so on.
	 *
	 * Animation durations should be evaluated on case-by-case basis, but general guideline is as follows:
	 * - 150ms for hover transitions
	 * - 200ms for enter and 150ms for exit modals and popovers
	 */
	--ease-in-quad: cubic-bezier(.55, .085, .68, .53);
	--ease-in-cubic: cubic-bezier(.550, .055, .675, .19);
	--ease-in-quart: cubic-bezier(.895, .03, .685, .22);
	--ease-in-quint: cubic-bezier(.755, .05, .855, .06);
	--ease-in-expo: cubic-bezier(.95, .05, .795, .035);
	--ease-in-circ: cubic-bezier(.6, .04, .98, .335);

	--ease-out-quad: cubic-bezier(.25, .46, .45, .94);
	--ease-out-cubic: cubic-bezier(.215, .61, .355, 1);
	--ease-out-quart: cubic-bezier(.165, .84, .44, 1);
	--ease-out-quint: cubic-bezier(.23, 1, .32, 1);
	--ease-out-expo: cubic-bezier(.19, 1, .22, 1);
	--ease-out-circ: cubic-bezier(.075, .82, .165, 1);

	--ease-in-out-quad: cubic-bezier(.455, .03, .515, .955);
	--ease-in-out-cubic: cubic-bezier(.645, .045, .355, 1);
	--ease-in-out-quart: cubic-bezier(.77, 0, .175, 1);
	--ease-in-out-quint: cubic-bezier(.86, 0, .07, 1);
	--ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
	--ease-in-out-circ: cubic-bezier(.785, .135, .15, .86);
}
